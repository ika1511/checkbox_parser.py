# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uE3DeahiiCP_yfHVuSOTLgDHJgDMnT5C
"""

import streamlit as st
import base64
import json
import boto3
import fitz  # PyMuPDF
from PIL import Image
import io

# --- Streamlit UI ---
st.title("Yes/No Checkbox Parser (Claude 3.5 via Bedrock)")
uploaded_file = st.file_uploader("/content/Doc3.pdf", type=["pdf"])

# --- AWS credentials (use your values or fetch from environment/Secrets) ---
AWS_ACCESS_KEY_ID = st.secrets["AWS_ACCESS_KEY_ID"]
AWS_SECRET_ACCESS_KEY = st.secrets["AWS_SECRET_ACCESS_KEY"]
AWS_SESSION_TOKEN = st.secrets["AWS_SESSION_TOKEN"]
REGION = 'us-west-2'
MODEL_ID = 'anthropic.claude-3-5-sonnet-20240620-v1:0'

def convert_pdf_to_base64_image(pdf_file):
    doc = fitz.open(stream=pdf_file.read(), filetype="pdf")
    first_page = doc.load_page(0)
    pix = first_page.get_pixmap(dpi=300)
    img = Image.open(io.BytesIO(pix.tobytes("png")))
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode("utf-8")

def invoke_claude_with_image(image_b64):
    session = boto3.Session(
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
        aws_session_token=AWS_SESSION_TOKEN,
        region_name=REGION
    )

    bedrock = session.client("bedrock-runtime")

    payload = {
        "anthropic_version": "bedrock-2023-05-31",
        "max_tokens": 1000,
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "image",
                        "source": {
                            "type": "base64",
                            "media_type": "image/png",
                            "data": image_b64
                        }
                    },
                    {
                        "type": "text",
                        "text": "From this image, extract all the questions and their selected checkbox (Yes or No). Return as a JSON list with 'field' and 'value'."
                    }
                ]
            }
        ]
    }

    response = bedrock.invoke_model(
        modelId=MODEL_ID,
        contentType="application/json",
        accept="application/json",
        body=json.dumps(payload)
    )

    result = json.loads(response['body'].read().decode())
    return result["content"][0]["text"]

# --- Run main logic ---
if uploaded_file:
    with st.spinner("Processing and sending to Claude..."):
        try:
            image_b64 = convert_pdf_to_base64_image(uploaded_file)
            output_json_text = invoke_claude_with_image(image_b64)
            st.success("Extraction successful!")
            st.subheader("Checkbox Responses:")
            st.json(json.loads(output_json_text))
        except Exception as e:
            st.error(f"‚ùå Error: {str(e)}")
